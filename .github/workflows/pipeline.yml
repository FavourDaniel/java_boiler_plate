name: Java Deployment Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - dev
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    # services:
    #   postgres:  
    #     image: postgres:latest
    #     env:
    #       POSTGRES_USER: postgres
    #       POSTGRES_PASSWORD: password
    #       POSTGRES_DB: test_db
    #     ports:
    #       - 5432:5432
    #     options: >-
    #       --health-cmd pg_isready
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: maven
          
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # - name: Setup Database
      #   run: |
      #     sudo apt-get install -y postgresql-client 
      #     PGPASSWORD=password psql -h localhost -U postgres -c "CREATE DATABASE IF NOT EXISTS test_db;" || true 
      #     sleep 30

      # - name: Setup Database
      #   run: |
      #     sudo apt-get install -y postgresql-client 
      #     # Check if database exists
      #     if ! PGPASSWORD=password psql -h localhost -U postgres -lqt | cut -d \| -f 1 | grep -qw test_db; then
      #       # Create database if it doesn't exist
      #       PGPASSWORD=password psql -h localhost -U postgres -c "CREATE DATABASE test_db;"
      #     fi
      #     sleep 30

      # - name: Run Flyway Migrations
      #   run: |
      #     for i in {1..10}; do # Retry 10 times with 5-second intervals
      #       echo "Attempt $i to connect to PostgreSQL..."
      #       if PGPASSWORD=password psql -h postgres -U postgres -c '\q' 2>/dev/null; then # Use 'postgres' as hostname
      #         echo "Connected to PostgreSQL successfully."
      #         mvn flyway:migrate -Dflyway.user=postgres -Dflyway.password=password -Dflyway.url=jdbc:postgresql://postgres:5432/test_db && break 
      #       else
      #         echo "PostgreSQL is not ready yet. Retrying in 5 seconds..."
      #         sleep 5
      #       fi
      #     done
      #     echo "PostgreSQL connection failed after 10 attempts."


      - name: Start Spring Boot Application
        run: |
          mvn spring-boot:run &
          sleep 60

      # - name: Run Tests
      #   run: |
      #     psql -h localhost -U postgres -d test_db -c "SELECT * FROM users;" > users.txt
      #     USER_ID=$(grep -oP '^\|\s+\K[^\s]+(?=\s+\|)' users.txt | head -1)
      #     curl -X GET http://localhost:8080/api/v1/users/$USER_ID
      #     echo "Response of the first user: $(curl -X GET http://localhost:8080/api/v1/users/$USER_ID)"
      #     mvn test

  unit-test:
    needs: build
    name: Unit Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Install Dependencies
        run: mvn dependency:go-offline

      - name: Unit Testing
        run: mvn -B test

      - name: Archive Test Result
        uses: actions/upload-artifact@v3
        if: always()
        with: 
          name: Package
          path: staging

  publish-job:
    name: Publish Artifact
    needs: [build, unit-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
      - run: mvn --batch-mode --update-snapshots verify
      - run: mkdir staging && cp target/*.jar staging
      - uses: actions/upload-artifact@v4
        with:
          name: Package
          path: staging

  deploy:
    needs: publish-job
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: Package
          path: staging

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass
  
      - name: Add SSH Key to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan $SSH_HOST >> ~/.ssh/known_hosts
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}

      - name: Deploy Artifact to Ubuntu Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          # port: 22
          source: "staging/"
          target: "/home/dhee/hng-java-boilerplate-0.0.1-SNAPSHOT.jar"
    
      - name: SSH and Run Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          # port: 22
          script: |
            sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USERNAME@$SSH_HOST " \
            cd /home/dhee/
            nohup java -jar hng-java-boilerplate-0.0.1-SNAPSHOT.jar &


      # - name: SSH into Server and Execute Command
      #   run: |
      #     sshpass -p $SSH_PASSWORD ssh -o StrictHostKeyChecking=no $SSH_USERNAME@$SSH_HOST
      #   env:
      #     SSH_HOST: ${{ secrets.SSH_HOST }}
      #     SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      #     SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}

      # - name: Extract JAR
      #   run: unzip Package/*.jar -d app

      # - name: Transfer JAR to Server
      #   run: |
      #     sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no staging/*.jar $SSH_USERNAME@$SSH_HOST:/home/dhee/
      #   env:
      #     SSH_HOST: ${{ secrets.SSH_HOST }}
      #     SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      #     SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}

      # - name: SSH into Server and Execute Command (Start/Restart)
      #   run: |
      #     sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USERNAME@$SSH_HOST "cd /path/to/your/deployment/directory && \
      #     sudo systemctl stop your-app-service && \
      #     nohup java -jar your-app.jar & && \
      #     sudo systemctl start your-app-service"
      #   env:
      #     SSH_HOST: ${{ secrets.SSH_HOST }}
      #     SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      #     SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}






    # dev-integration-testing:

    # prod-deploy:
    #     needs: [build, unit-testing, code-coverage]
    #     uses: ./.github/workflows/reuse-deploy.yml
    #     secrets:
    #         test-db-password: ${{ secrets.TEST }}
    #         mongo-db-password: ${{ secrets.MONGODB_PASSWORD }}
    #     environment: 
    #       name: ${{ github.ref == 'refs/heads/main' || 'production' }}
    #       url: ${{ github.ref == 'refs/heads/main'  || 'https://prod-url.com' }} # Update with your actual URLs
    #     strategy:
    #       matrix:
    #         environment: [development]

    # prod-integration-testing: