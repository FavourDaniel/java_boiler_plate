name: Java Deployment Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:  
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for Flyway migrations

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: maven
          
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Setup Database
        run: |
          sudo apt-get install -y postgresql-client 
          PGPASSWORD=password psql -h localhost -U postgres -c "CREATE DATABASE test_db;" || true 
          sleep 20

      - name: Run Flyway Migrations
        run: |
          mvn flyway:migrate -Dflyway.user=postgres -Dflyway.password=password -Dflyway.url=jdbc:postgresql://localhost:5432/test_db
  
      - name: Start Spring Boot Application
        run: |
          mvn spring-boot:run &
          sleep 20

      - name: Run Tests
        run: |
          psql -h localhost -U postgres -d test_db -c "SELECT * FROM users;" > users.txt
          USER_ID=$(grep -oP '^\|\s+\K[^\s]+(?=\s+\|)' users.txt | head -1)
          curl -X GET http://localhost:8080/api/v1/users/$USER_ID
          echo "Response of the first user: $(curl -X GET http://localhost:8080/api/v1/users/$USER_ID)"
          mvn test

  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Install Dependencies
        run: mvn dependency:go-offline
      - name: Unit Testing
        run: mvn -B test

      - name: Archive Test Result
        uses: actions/uploadartifact@v3
        if: always()
        with: 
          name: Java-Test-Result
          path: staging

  publish-job:  
    name: Publish Artifact
    needs: [build, unit-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: temurin
      - run: mvn --batch-mode --update-snapshots verify
      - run: mkdir staging && cp target/*.jar staging
      - uses: actions/upload-artifact@v4
        with:
          name: Package
          path: staging


  # deploy-dev:
  #   name: Deploy to Development Server
  #   needs: publish-job
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/dev'
  #   environment: dev
  #   steps:
  #     - name: Download Artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: Package

  #     - name: Set up SSH key
  #       run: |
  #         env
  #         mkdir -p ~/.ssh
  #         echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
  #         chmod 600 ~/.ssh/id_rsa
  #         ssh-keyscan -p 22 ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
  #         sudo apt-get install sshpass

  #     - name: Connect and Pull
  #       run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.WORK_DIR }} && git checkout ${{ secrets.MAIN_BRANCH }} && git pull && exit"


  #     - name: Deploy to server
  #       run: |
  #         unzip Package/*.jar -d app
  #         sshpass -p '${{ secrets.PSWD }}' ssh -v -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} <<'ENDSSH'
  #         cd ${{ secrets.APP_PATH }}
  #         git pull
  #         docker stop ${{ secrets.APP_NAME }}
  #         docker system prune -f
  #         export ${{ secrets.API_KEY_NAME }}=${{ secrets.API_KEY }}
  #         make deploy_headless
  #         ENDSSH


  # dev-deploy:
  #   needs: publish-job
  #   uses: ./.github/workflows/reuse-deploy.yml
  #   strategy:
  #     matrix:
  #       environment: [dev]

    # dev-integration-testing:

    # prod-deploy:
    #     needs: [build, unit-testing, code-coverage]
    #     uses: ./.github/workflows/reuse-deploy.yml
    #     secrets:
    #         test-db-password: ${{ secrets.TEST }}
    #         mongo-db-password: ${{ secrets.MONGODB_PASSWORD }}
    #     environment: 
    #       name: ${{ github.ref == 'refs/heads/main' || 'production' }}
    #       url: ${{ github.ref == 'refs/heads/main'  || 'https://prod-url.com' }} # Update with your actual URLs
    #     strategy:
    #       matrix:
    #         environment: [development]

    # prod-integration-testing: